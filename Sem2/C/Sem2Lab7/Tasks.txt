Q
Укажите верное утверждение относительно следующих перечислений:

enum en1 { ELEM1_1, ELEM1_2, ELEM1_4 };
enum en1 { ELEM2_1, ELEM2_2, ELEM2_3, };
enum { ELEM3_1, ELEM3_2, ELEM3_4 } en3;
typedef enum {ELEM4_1 = 1, ELEM4_2, ELEM4_4 } en4;
$
A
ELEM1_4 == 3
A
В объявлении en2 ошибка: запятая в конце.
RA
ELEM4_2 == ELEM1_4 == ELEM2_3 == ELEM3_4
A
Различие между en1 и en3 заключается только в названии их и их элементов.

---------------------------------

Q
Что выведет следующая программа?

double a;
double b = 2;
a = b * 5 / 2 + 5 / 2 * b;
printf ("%f", a);
$
A
5.000000
A
8.000000
RA
9.000000
A
10.000000

---------------------------------

Q
Какой результат выполнения следующего кода?

#include <stdio.h>
typedef struct {
    int x;
    int y;
    int z;
} Coord;

void Print() {
    static Coord C1;
    C1.x = 1;
    C1.y = 2;
    printf ("C1 = %d %d %d", C1.x, C1.y, C1.z); // 1
}

int main() {
    Print ();
    return 0;
}
$
A
C1 = 1 2 3
RA
C1 = 1 2 0
A
Будет ошибка компиляции в строке //1: "Неинициализированная переменная C1.z"

---------------------------------

Q
Выберите правильное утверждения для следующих типов

1) const int *
2) int const *
3) int * const
$
RA
Первый тип означает указатель на константу типа int
A
Второй тип означает константный указатель на объект типа int
A
Третий тип означает константный указатель на константу типа int

---------------------------------

Q
Укажите НЕдопустимый в C литерал:
$
A
01
RA
0h1
A
0x1
A
.1

---------------------------------

Q
В ASCII символ с кодом 0x43 — это буква С английского алфавита.
Что будет напечатано в результате выполнения кода:

printf ("Программа на \0x43\n");
$
A
Программа на C\n
A
Программа на \0x43
A
Программа на C
RA
Программа на

---------------------------------

Q
Функция должна возвращать 1, если передаваемые параметры равны, и 0 в противном случае.
Какие строки кода содержат логические ошибки либо ошибки компиляции?

int is_equal (int a, int b) {
    if (a = b) // 1
    return 1; // 2
    return 0; // 3
}
$
RA
// 1
A
// 2
A
// 3
A
Ошибок нет

---------------------------------

Q
Укажите корректный вариант объявления массива.
$
A
int array;
A
int array[];
RA
int array[3];
A
int array[1..2];

---------------------------------

Q
Какое из перечисленных ключевых слов НЕ являются зарезервированными в C?
$
A
switch
RA
undo
A
enum
A
struct

---------------------------------

Q
Что выведет следующая программа:

#include <stdio.h>
int main ()
{
    int i = 0;
    while (++i < 5)
    {
        printf ("%d", i%2);
    }
    return 0;
}
$
RA
1010
A
10101
A
01248
A
01010

---------------------------------

Q
Что выведется на экран в результате выполнения?

#include <stdio.h>
main (void)
{
    int a = 5;
    int b = 7;
    a^=b^=a^=b;
    printf ("%d%d", a, b);
}
$
A
Ошибка компиляции
A
55
A
57
RA
75

---------------------------------

Q
Какой тип указателя может указывать на любой тип данных?
$
RA
void *ptr;
A
void ptr;
A
const void ptr;
A
Такого указателя не существует

---------------------------------

Q
Укажите корректный прототип для функции:

int sum(int a, int b) {
    return a + b;
}
$
A
sum(int, int): int;
A
sum() int a, int b
RA
int sum(int, int);
A
int sum() int a, int b;

---------------------------------

Q
Что означает следующее объявление:

typedef int (* A)( )
$
A
Объявляется тип, который представляет собой указатель на переменную типа int
RA
Объявляется тип, который представляет собой указатель на функцию, возвращающую значение типа int
A
Объявляется указатель на переменную A целого типа
A
Объявляется константный указатель на переменную A типа int

---------------------------------

Q
Что выведет следующая программа?

#include <stdio.h>
func () {
    return 1, 2, 3;
}
main () {
    int a, b, c;
    a, b, c = func();
    printf ("%d %d %D\n", a, b, b);
    return 0;
}
$
A
1 2 3
A
0 0 3
A
Код не скомпилируется
RA
Результат не определён
